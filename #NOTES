• Não é possível declarar uam função quebrando a mesma na próx linha {}


	// while in go
	// i := 0
	// for i <= 10 {
	// 	fmt.Println(i)
	// 	i++
	// }
	// return false, 0

	// var a [5]int = [5]int{1, 2, 3, 4, 5}
	// x := [5]int{1, 2, 3, 4, 5}
	// fmt.Println(x)

	// myslice := []int{1, 2, 3, 4, 5}
	// myslice = append(myslice, 6)
	// fmt.Println(myslice)

	// s := make([]int, 5)
	// s[0], s[1], s[2], s[3], s[4] = 1, 2, 3, 4, 5 // capacity: cap(s) length: len(s)
	// fmt.Println(s)
	// s1 := s[1:3]
	// fmt.Println(s1)

	// fmt.Println(s1[:cap(s1)])
	// s2 := make([]int, 2)
	// copy(s2, s[1:3])
	// fmt.Println(s2)
	// s2 := s[0:1]
	// fmt.Println(s2)

	// var v map[string]int = make(map[string] int)
	// x := make(map[string]int)
	// x["first"] = 1
	// x["second"] = 2
	// _, ok := x["third"]
	// fmt.Println(ok)
	// fmt.Println(x)
	// y := map[string]int{
	// 	"first":  2,
	// 	"second": 2,
	// }

	// delete(y, "first")
	// fmt.Println(y)




    package main

import (
	"fmt"
)

var x uint8 = 2

func main() {
	defer fmt.Println("World")
	fmt.Println("Hello")
	testpanics()

	fmt.Println(compareNumbers(1, 2))
	var I int = 3
	increment(I)
	fmt.Println(I)

func increment(pI *int) {
	*pI++ //dereferecing
}

func testpanics() {
	defer func() {
		if err := recover(); err != nil {
			fmt.Println(err)
			fmt.Println("We recover from a panic")
		}
	}()
	panic("A panic happned")
}












package main

import (
	"fmt"
	"time"
)

func main() {
	ic := make(chan int)
	go periodicsSend(ic)
	for i := range ic {
		fmt.Println(i)
	}
	_, ok := <-ic
	fmt.Println(ok)
}

func SayHelloFromGourine(qs chan bool) {
	fmt.Println("Hello from a new goroutine")
	qs <- true
}
func periodicsSend(ic chan int) {
	i := 0
	for i <= 10 {
		ic <- i
		i++
		time.Sleep(3 * time.Second)
	}
	close(ic)
}














package main

import (
	"fmt"
	"time"
)

func main() {
	// buffch := make(chan int, 5)
	// buffch <- 3
	// buffch <- 2
	// fmt.Println(<-buffch)
	fmt.Println(<-waitAndSend(3, 1))
}

func waitAndSend(v, i int) chan int { // will wait for i seconds before sending value v on the return channel
	retCh := make(chan int)
	go func() {
		time.Sleep(time.Duration(i) * time.Second)
		retCh <- v
	}()
	return retCh

}
